findAllRotatedImages <- function(output, prefix){
directories = list.dirs(path = output, full.names = TRUE, recursive = FALSE)
images = vector("list", length(directories))
k = 1
for(i in directories){
subFolders = list.dirs(path = i, full.names = TRUE, recursive = FALSE)
for(j in subFolders){
if(grepl("rotations", j)){
print(j)
rotatedImages = list.files(path=j)
rotatedImagesWOE = tools::file_path_sans_ext(rotatedImages)
rotatedImagesWOE = paste(prefix, rotatedImagesWOE, sep = "")
#rotatedImagesWOE = paste(substring(j,nchar(output)+1),rotatedImagesWOE, sep = "/")
print(rotatedImagesWOE)
images[[k]] = rotatedImagesWOE
k = k+1
}
}
}
# fileConn<-file(fName)
# writeLines(lines, fileConn)
# close(fileConn)
return(images)
}
createPairwiseSimilarity <- function(imagesFromSame){
lines = c()
for(i in 1:(length(imagesFromSame)-1)){
for(j in (i+1):length(imagesFromSame)){
lines = c(lines, paste(imagesFromSame[i], imagesFromSame[j], 0, 0, 0, 0, 1, 1, sep = " "))
}
}
return(lines)
}
createTrainingsSet <- function(images){
lines = c()
for(i in 1:length(images)){
lines = c(lines, createPairwiseSimilarity(images[[i]]))
}
return(lines)
}
writeTrainingsSet <- function(fName, ts, toBePredicted){
ts = c(paste("#idim1(1) idim2(2) catim1(3) catim2(4) crap(5) crap(6) labpair[0,1](7) islearn[0,1](8)"),ts)
ts = c(ts, toBePredicted)
fileConn<-file(fName)
writeLines(ts, fileConn)
close(fileConn)
}
createPredictionSet <- function(images){
lines = c()
for(i in 1:(length(images)-2)){
for(j in (i+1):(length(images)-1)){
print(i, j)
lines = c(lines, paste(images[[i]], images[[j]], 0, 0, 0, 0, 1, 0, sep = " "))
}
}
return(lines)
}
#------------------------------------------------------------------------
OutputFolder = "/home/willy/RedoxChallenges/ModelFramework/ImageSimilarity/smallExampleWithMolecules/SmallExample/Output/"
# we need something other than numbers in the beginning of the name otherwise the image-similarity-programm will
# not find the images
prefix = ""    # added this to the tcl-script
images = findAllRotatedImages(OutputFolder, prefix)
l = createTrainingsSet(images)
pred = createPredictionSet(images)
pred = createPredictionSet(images)
writeTrainingsSet(paste(OutputFolder,"pairs.txt",sep = ""),l,pred)
l = createTrainingsSet(images)
l
pred = createPredictionSet(images)
length(images)
createPredictionSet <- function(images){
lines = c()
for(i in 1:(length(images)-1)){
for(j in (i+1):(length(images)-0)){
print(i, j)
lines = c(lines, paste(images[[i]], images[[j]], 0, 0, 0, 0, 1, 0, sep = " "))
}
}
return(lines)
}
#------------------------------------------------------------------------
OutputFolder = "/home/willy/RedoxChallenges/ModelFramework/ImageSimilarity/smallExampleWithMolecules/SmallExample/Output/"
# we need something other than numbers in the beginning of the name otherwise the image-similarity-programm will
# not find the images
prefix = ""    # added this to the tcl-script
images = findAllRotatedImages(OutputFolder, prefix)
l = createTrainingsSet(images)
pred = createPredictionSet(images)
writeTrainingsSet(paste(OutputFolder,"pairs.txt",sep = ""),l,pred)
createViewPoints <- function(fName, deltaX, deltaY, num){
xVals = seq(-deltaX,deltaX,(deltaX*2)/(num-1))
yVals = seq(-deltaY,deltaY,(deltaY*2)/(num-1))
# xVals = c(-deltaX:deltaX)
# yVals = c(-deltaY:deltaY)
lines = c("#x;y;z")
for(i in xVals){
for(j in yVals){
lines = c(lines,paste(i,j,0,sep = ";"))
}
}
fileConn<-file(fName)
writeLines(lines, fileConn)
close(fileConn)
}
createViewPoints("/home/sysgen/Documents/LWB/TCL/MutComp/viewPoints.csv",15,15, 3)
createViewPoints("/home/willy/RedoxChallenges/MutComp/viewPoints.csv",15,15, 3)
createViewPoints("/home/willy/RedoxChallenges/MutComp/viewPoints.csv",15,15, 2)
# creates numX*numY pictures stepping through -deltaX to deltaX evenly aswell as for deltaY
# deltaX, deltaY  ... rotations around X, Y -Axis
createViewPoints <- function(fName, deltaX, deltaY, numX, numY){
xVals = seq(-deltaX,deltaX,(deltaX*2)/(numX-1))
yVals = seq(-deltaY,deltaY,(deltaY*2)/(numY-1))
# xVals = c(-deltaX:deltaX)
# yVals = c(-deltaY:deltaY)
lines = c("#x;y;z")
for(i in xVals){
for(j in yVals){
lines = c(lines,paste(i,j,0,sep = ";"))
}
}
fileConn<-file(fName)
writeLines(lines, fileConn)
close(fileConn)
}
createViewPoints("/home/willy/RedoxChallenges/MutComp/viewPoints.csv",15,15, 2, 1)
#------------------------------------------------------------------------
OutputFolder = "/home/willy/RedoxChallenges/ModelFramework/ImageSimilarity/smallExampleWithMolecules/SmallExample/Output/"
# we need something other than numbers in the beginning of the name otherwise the image-similarity-programm will
# not find the images
prefix = ""    # added this to the tcl-script
images = findAllRotatedImages(OutputFolder, prefix)
l = createTrainingsSet(images)
pred = createPredictionSet(images)
writeTrainingsSet(paste(OutputFolder,"pairs.txt",sep = ""),l,pred)
#------------------------------------------------------------------------
OutputFolder = "/home/willy/RedoxChallenges/ModelFramework/ImageSimilarity/smallExampleWithMolecules/SmallExample/Output/"
# we need something other than numbers in the beginning of the name otherwise the image-similarity-programm will
# not find the images
prefix = ""    # added this to the tcl-script
images = findAllRotatedImages(OutputFolder, prefix)
l = createTrainingsSet(images)
pred = createPredictionSet(images)
writeTrainingsSet(paste(OutputFolder,"pairs.txt",sep = ""),l,pred)
# creates numX*numY pictures stepping through -deltaX to deltaX evenly aswell as for deltaY
# deltaX, deltaY  ... rotations around X, Y -Axis
createViewPoints <- function(fName, deltaX, deltaY, numX, numY){
xVals = c()
yVals = c()
if(numX == 0){
xVals = c(deltaX)
} else {
xVals = seq(-deltaX,deltaX,(deltaX*2)/(numX-1))
}
if(numY == 0){
yVals = c(deltaY)
} else {
yVals = seq(-deltaY,deltaY,(deltaY*2)/(numX-1))
}
# xVals = c(-deltaX:deltaX)
# yVals = c(-deltaY:deltaY)
lines = c("#x;y;z")
for(i in xVals){
for(j in yVals){
lines = c(lines,paste(i,j,0,sep = ";"))
}
}
fileConn<-file(fName)
writeLines(lines, fileConn)
close(fileConn)
}
createViewPoints("/home/willy/RedoxChallenges/MutComp/viewPoints.csv",15,15, 2, 1)
# creates numX*numY pictures stepping through -deltaX to deltaX evenly aswell as for deltaY
# deltaX, deltaY  ... rotations around X, Y -Axis
createViewPoints <- function(fName, deltaX, deltaY, numX, numY){
xVals = c()
yVals = c()
if(numX == 1){
xVals = c(deltaX)
} else {
xVals = seq(-deltaX,deltaX,(deltaX*2)/(numX-1))
}
if(numY == 1){
yVals = c(deltaY)
} else {
yVals = seq(-deltaY,deltaY,(deltaY*2)/(numX-1))
}
# xVals = c(-deltaX:deltaX)
# yVals = c(-deltaY:deltaY)
lines = c("#x;y;z")
for(i in xVals){
for(j in yVals){
lines = c(lines,paste(i,j,0,sep = ";"))
}
}
fileConn<-file(fName)
writeLines(lines, fileConn)
close(fileConn)
}
createViewPoints("/home/willy/RedoxChallenges/MutComp/viewPoints.csv",15,15, 2, 1)
findAllRotatedImages <- function(output, prefix){
directories = list.dirs(path = output, full.names = TRUE, recursive = FALSE)
images = vector("list", length(directories))
k = 1
for(i in directories){
subFolders = list.dirs(path = i, full.names = TRUE, recursive = FALSE)
for(j in subFolders){
if(grepl("rotations", j)){
print(j)
rotatedImages = list.files(path=j)
rotatedImagesWOE = tools::file_path_sans_ext(rotatedImages)
rotatedImagesWOE = paste(prefix, rotatedImagesWOE, sep = "")
#rotatedImagesWOE = paste(substring(j,nchar(output)+1),rotatedImagesWOE, sep = "/")
print(rotatedImagesWOE)
images[[k]] = rotatedImagesWOE
k = k+1
}
}
}
# fileConn<-file(fName)
# writeLines(lines, fileConn)
# close(fileConn)
return(images)
}
createPairwiseSimilarity <- function(imagesFromSame){
lines = c()
for(i in 1:(length(imagesFromSame)-1)){
for(j in (i+1):length(imagesFromSame)){
lines = c(lines, paste(imagesFromSame[i], imagesFromSame[j], 0, 0, 0, 0, 1, 1, sep = " "))
}
}
return(lines)
}
createTrainingsSet <- function(images){
lines = c()
for(i in 1:length(images)){
lines = c(lines, createPairwiseSimilarity(images[[i]]))
}
return(lines)
}
writeTrainingsSet <- function(fName, ts, toBePredicted){
ts = c(paste("#idim1(1) idim2(2) catim1(3) catim2(4) crap(5) crap(6) labpair[0,1](7) islearn[0,1](8)"),ts)
ts = c(ts, toBePredicted)
fileConn<-file(fName)
writeLines(ts, fileConn)
close(fileConn)
}
createPredictionSet <- function(images){
lines = c()
for(i in 1:(length(images)-1)){
for(j in (i+1):(length(images)-0)){
print(i, j)
lines = c(lines, paste(images[[i]], images[[j]], 0, 0, 0, 0, 1, 0, sep = " "))
}
}
return(lines)
}
#------------------------------------------------------------------------
OutputFolder = "/home/willy/RedoxChallenges/ModelFramework/ImageSimilarity/smallExampleWithMolecules/SmallExample/Output/"
# we need something other than numbers in the beginning of the name otherwise the image-similarity-programm will
# not find the images
prefix = ""    # added this to the tcl-script
images = findAllRotatedImages(OutputFolder, prefix)
l = createTrainingsSet(images)
pred = createPredictionSet(images)
writeTrainingsSet(paste(OutputFolder,"pairs.txt",sep = ""),l,pred)
pred = createPredictionSet(images)
pred
createPredictionSet <- function(images){
lines = c()
for(i in 1:(length(images)-2)){
for(j in (i+1):(length(images)-1)){
print(i, j)
lines = c(lines, paste(images[[i]], images[[j]], 0, 0, 0, 0, 1, 0, sep = " "))
}
}
return(lines)
}
#------------------------------------------------------------------------
OutputFolder = "/home/willy/RedoxChallenges/ModelFramework/ImageSimilarity/smallExampleWithMolecules/SmallExample/Output/"
# we need something other than numbers in the beginning of the name otherwise the image-similarity-programm will
# not find the images
prefix = ""    # added this to the tcl-script
images = findAllRotatedImages(OutputFolder, prefix)
l = createTrainingsSet(images)
pred = createPredictionSet(images)
pred
writeTrainingsSet(paste(OutputFolder,"pairs.txt",sep = ""),l,pred)
#------------------------------------------------------------------------
OutputFolder = "/home/willy/RedoxChallenges/ModelFramework/ImageSimilarity/smallExampleWithMolecules/SmallExample/Output/"
# we need something other than numbers in the beginning of the name otherwise the image-similarity-programm will
# not find the images
prefix = ""    # added this to the tcl-script
images = findAllRotatedImages(OutputFolder, prefix)
l = createTrainingsSet(images)
pred = createPredictionSet(images)
writeTrainingsSet(paste(OutputFolder,"pairs.txt",sep = ""),l,pred)
?rm
?mkdir
??mkdir
install.packages("icesTAF")
library(icesTAF)
images
images = findAllRotatedImages(OutputFolder, prefix)
images
directories = list.dirs(path = OutputFolder, full.names = TRUE, recursive = FALSE)
directories
directories = list.dirs(path = OutputFolder, full.names = TRUE, recursive = FALSE)
directories
system(paste("mkdir ",OutputFolder,"/similarityImages", sep = ""))
images = vector("list", length(directories))
images = vector("list", length(directories))
k = 1
for(i in directories){
subFolders = list.dirs(path = i, full.names = TRUE, recursive = FALSE)
}
subFolders
images = findAllRotatedImages(OutputFolder, prefix)
images
directories = list.dirs(path = OutputFolder, full.names = TRUE, recursive = FALSE)
directories
directories = list.dirs(path = OutputFolder, full.names = TRUE, recursive = FALSE)
directories
directories = list.dirs(path = OutputFolder, full.names = TRUE, recursive = FALSE)
directories
images[i]
images[1]
images[[1]]
images[[1,]]
images[[,1]]
images[[1,1]]
images[[2,1]]
images[[1]1]
images[[1],1]
images[1,[1]]
images[[1]]
images[[1]][1]
system(paste("mkdir ",OutputFolder,"/similarityImages", sep = ""))
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/", images[[i]][j], ".tga"))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/", images[[i]][j], ".tga", sep = ""))
}
}
directories
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/", images[[i]][j], ".tga ", OutputFolder, "/", images[[i]][j], ".tga", sep = ""))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
system(paste("convert ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga",
OutputFolder, "/similarityImages/", images[[i]][j], "png"))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
system(paste("convert ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga",
OutputFolder, "/similarityImages/", images[[i]][j], ".png"))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
system(paste("convert ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga",
OutputFolder, "/similarityImages/", images[[i]][j], ".png", sep = ""))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
system(paste("echo ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga",
OutputFolder, "/similarityImages/", images[[i]][j], ".png", sep = ""))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
system(paste("convert ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga ",
OutputFolder, "/similarityImages/", images[[i]][j], ".png", sep = ""))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
system(paste("convert ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga ",
OutputFolder, "/similarityImages/", images[[i]][j], ".png", sep = ""))
system(paste("rm ", OutputFolder, "/*.tga", sep = ""))
}
}
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
system(paste("convert ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga ",
OutputFolder, "/similarityImages/", images[[i]][j], ".png", sep = ""))
system(paste("rm ", OutputFolder, "/similarityImages/*.tga", sep = ""))
}
}
directories = list.dirs(path = OutputFolder, full.names = TRUE, recursive = FALSE)
system(paste("cp ", path2MutComp, "/dummy.png ", OutputFolder, "/similarityImages/dummy.png", sep = ""))
#------------------------------------------------------------------------
path2MutComp = "/home/willy/RedoxChallenges/MutComp/"
system(paste("cp ", path2MutComp, "/dummy.png ", OutputFolder, "/similarityImages/dummy.png", sep = ""))
system(paste("cp ", path2MutComp, "/ImageSimilarity/dummy.png ", OutputFolder, "/similarityImages/dummy.png", sep = ""))
l
l[1]
word(l[1], 1:3, -1)
install.packages("stringr")
library(str)
library(stringr)
word(l[1], 1:3, -1)
r = word(l[1], 1:3, -1)
r
r = word(l[1], 1, -1)
r
r = word(l[1], 1)
r
word(l[1], 1)
word(l[1], 2)
word(l[1], 3)
word(l[1], 2:length(l))
word(l[1], 2,length(l))
paste("dummy.png " ,word(l[1], 2,length(l)), sep = "")
paste("dummy " ,word(l[1], 2,length(l)), sep = "")
words(l[2], 1, 3)
word(l[2], 1, 3)
word(l[2], 1, (length(l[2])-2))
word(l[2], 1, (length(l[2])-3))
