}
}
# fileConn<-file(fName)
# writeLines(lines, fileConn)
# close(fileConn)
return(images)
}
createPairwiseSimilarity <- function(imagesFromSame){
lines = c()
for(i in 1:(length(imagesFromSame)-1)){
for(j in (i+1):length(imagesFromSame)){
lines = c(lines, paste(imagesFromSame[i], imagesFromSame[j], 0, 0, 0, 0, 1, 1, sep = " "))
}
}
return(lines)
}
createTrainingsSet <- function(images){
lines = c()
for(i in 1:length(images)){
lines = c(lines, createPairwiseSimilarity(images[[i]]))
}
return(lines)
}
writeTrainingsSet <- function(fName, ts, toBePredicted){
ts = c(paste("#idim1(1) idim2(2) catim1(3) catim2(4) crap(5) crap(6) labpair[0,1](7) islearn[0,1](8)"),ts)
ts = c(ts, toBePredicted)
# create the comparison with the dummy
ts = c(ts, paste("dummy " ,word(ts[2], 2,(length(ts)-4)), " 0 1", sep = ""))
# ts = c(ts, paste("dummy " ,word(ts[2], 2,(length(ts)-4)), " 0 1", sep = ""))
fileConn<-file(fName)
writeLines(ts, fileConn)
close(fileConn)
}
createPredictionSet <- function(images){
lines = c()
for(i in 1:(length(images)-1)){
for(j in (i+1):(length(images)-0)){
print(i, j)
lines = c(lines, paste(images[[i]], images[[j]], 0, 0, 0, 0, 1, 0, sep = " "))
}
}
return(lines)
}
#------------------------------------------------------------------------
path2MutComp = "/home/sysgen/Documents/LWB/TCL/MutComp/"
OutputFolder = "/home/sysgen/Documents/LWB/TCL/SmallExample/Output/"
system(paste("rm -r ", OutputFolder,"/similarityImages", sep = ""))
# we need something other than numbers in the beginning of the name otherwise the image-similarity-programm will
prefix = ""    # added this to the tcl-script
images = findAllRotatedImages(OutputFolder, prefix)
l = createTrainingsSet(images)
pred = createPredictionSet(images)
writeTrainingsSet(paste(OutputFolder,"pairs.txt",sep = ""),l,pred)
#--------------------------------------------------------------------
# copy images in one folder and convert them to png
directories = list.dirs(path = OutputFolder, full.names = TRUE, recursive = FALSE)
system(paste("mkdir ",OutputFolder,"/similarityImages", sep = ""))
for(i in 1:length(directories)){
for(j in 1:length(images[[i]])){
system(paste("cp ", directories[i] , "/rotations/", images[[i]][j], ".tga ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga", sep = ""))
system(paste("convert ", OutputFolder, "/similarityImages/", images[[i]][j], ".tga ",
OutputFolder, "/similarityImages/", images[[i]][j], ".png", sep = ""))
system(paste("rm ", OutputFolder, "/similarityImages/*.tga", sep = ""))
}
}
system(paste("cp ", path2MutComp, "/ImageSimilarity/dummy.png ", OutputFolder, "/similarityImages/dummy.png", sep = ""))
createViewPoints <- function(fName, deltaX, deltaY, num){
xVals = seq(-deltaX,deltaX,(deltaX*2)/(num-1))
yVals = seq(-deltaY,deltaY,(deltaY*2)/(num-1))
# xVals = c(-deltaX:deltaX)
# yVals = c(-deltaY:deltaY)
lines = c("#x;y;z")
for(i in xVals){
for(j in yVals){
lines = c(lines,paste(i,j,0,sep = ";"))
}
}
fileConn<-file(fName)
writeLines(lines, fileConn)
close(fileConn)
}
createViewPoints("/home/sysgen/Documents/LWB/TCL/MutComp/ImageSimilarity/viewPoints.csv",15,15, 3)
# creates numX*numY pictures stepping through -deltaX to deltaX evenly aswell as for deltaY
# deltaX, deltaY  ... rotations around X, Y -Axis
createViewPoints <- function(fName, deltaX, deltaY, numX, numY){
xVals = c()
yVals = c()
if(numX == 1){
xVals = c(deltaX)
} else {
xVals = seq(-deltaX,deltaX,(deltaX*2)/(numX-1))
}
if(numY == 1){
yVals = c(deltaY)
} else {
yVals = seq(-deltaY,deltaY,(deltaY*2)/(numX-1))
}
# xVals = c(-deltaX:deltaX)
# yVals = c(-deltaY:deltaY)
lines = c("#x;y;z")
for(i in xVals){
for(j in yVals){
lines = c(lines,paste(i,j,0,sep = ";"))
}
}
fileConn<-file(fName)
writeLines(lines, fileConn)
close(fileConn)
}
createViewPoints("/home/willy/RedoxChallenges/MutComp/ImageSimilarity/viewPoints.csv",15,15, 2, 1)
createViewPoints("/home/sysgen/Documents/LWB/TCL/MutComp/ImageSimilarity/viewPoints.csv",15,15, 2, 1)
createViewPoints("/home/sysgen/Documents/LWB/TCL/MutComp/ImageSimilarity/viewPoints.csv",15,15, 3, 3)
createViewPoints("/home/sysgen/Documents/LWB/TCL/MutComp/ImageSimilarity/viewPoints.csv",15,15, 1, 1)
createViewPoints("/home/sysgen/Documents/LWB/TCL/MutComp/ImageSimilarity/viewPoints.csv",15,15, 1, 1)
createViewPoints <- function(fName, deltaX, deltaY, numX, numY){
xVals = c()
yVals = c()
if(numX == 1){
xVals = c(deltaX)
} else {
xVals = seq(-deltaX,deltaX,(deltaX*2)/(numX-1))
}
if(numY == 1){
yVals = c(deltaY)
} else {
yVals = seq(-deltaY,deltaY,(deltaY*2)/(numX-1))
}
# xVals = c(-deltaX:deltaX)
# yVals = c(-deltaY:deltaY)
lines = c("#x;y;z")
for(i in xVals){
for(j in yVals){
lines = c(lines,paste(i,j,0,sep = ";"))
}
}
fileConn<-file(fName)
writeLines(lines, fileConn)
close(fileConn)
}
# createViewPoints("/home/sysgen/Documents/LWB/TCL/MutComp/ImageSimilarity/viewPoints.csv",25,25, 4, 4)
createViewPoints("/home/sysgen/Documents/LWB/TCL/MutComp/ImageSimilarity/viewPoints.csv",0,0, 1, 1)
10 - Sys.time()
10 - as.numeric(Sys.time())
as.numeric(Sys.time())
Sys.time()
source('/tmp/mozilla_sysgen0/myClusters.R')
source('/tmp/mozilla_sysgen0/myClusters.R')
library(cluster)
pathAtHome = "/home/willy/RedoxChallenges/Felix/24.5/Output/"
pathAtWS = "/home/sysgen/Documents/LWB/Clustering/"
file = "ListOfEMD_negative_100.csv"
emdList = paste(path,file,sep="")
M = read.csv(emdList, header=TRUE, col.names=c("protein1","protein2","EMD"))
pathAtHome = "/home/willy/RedoxChallenges/Felix/24.5/Output/"
pathAtWS = "/home/sysgen/Documents/LWB/Clustering/"
file = "ListOfEMD_negative_100.csv"
emdList = paste(pathAtWS,file,sep="")
M = read.csv(emdList, header=TRUE, col.names=c("protein1","protein2","EMD"))
numOfProteins = 105
myClusters <- function(myData, numOfProteins, numOfCenters, numOfIterations){
distMatrix = matrix(myData$EMD, nrow = numOfProteins)
DM = as.matrix(dist(distMatrix, method = "euclidean"))
HC = hclust(as.dist(DM), method="single")
## Silhouette
plot(2:10, sapply(2:10, function(i) {
mean(silhouette(cutree(HC, i), dmatrix=DM)[,"sil_width"]) }),
xlab="Number of clusters", ylab="Average Silhouette", type="b", pch=20)
mds = cmdscale(DM);
cl = kmeans(mds,numOfCenters, iter.max = numOfIterations)
mdsWithLabels = cbind(mds, cl$cluster)
plot(mdsWithLabels, col = mdsWithLabels[,3])
points(cl$centers, pch = 8, col = 1:length(cl$centers))
return(cl$cluster)
}
cluster = myClusters(M,105,2, 10000)
sorted = sort(cluster)
View(sorted)
emdListPositive = paste(pathAtWS,file,sep="")
M = read.csv(emdListPositive, header=TRUE, col.names=c("protein1","protein2","EMD"))
MNeg = read.csv(emdListNegative, header=TRUE, col.names=c("protein1","protein2","EMD"))
numOfProteins = 105
cluster = myClusters(MNeg,numOfProteins,2, 10000)
MNeg = read.csv(emdListNegative, header=TRUE, col.names=c("protein1","protein2","EMD"))
pathAtHome = "/home/willy/RedoxChallenges/Felix/24.5/Output/"
pathAtWS = "/home/sysgen/Documents/LWB/Clustering/"
file = "ListOfEMD_negative_100.csv"
emdListNegative = paste(pathAtWS,file,sep="")
MNeg = read.csv(emdListNegative, header=TRUE, col.names=c("protein1","protein2","EMD"))
numOfProteins = 105
cluster = myClusters(MNeg,numOfProteins,2, 10000)
sorted = sort(cluster)
emdListPositive = paste(pathAtWS,file,sep="")
MPos = read.csv(emdListPositive, header=TRUE, col.names=c("protein1","protein2","EMD"))
numOfProteins = 105
cluster = myClusters(MPos,numOfProteins,2, 10000)
cluster = myClusters(MPos,numOfProteins,2, 10000)
MNeg = read.csv(emdListNegative, header=TRUE, col.names=c("protein1","protein2","EMD"))
fileNeg = "ListOfEMD_negative_100.csv"
emdListNegative = paste(pathAtWS,fileNeg,sep="")
filePos = "ListOfEMD_negative_100.csv"
emdListPositive = paste(pathAtWS,filePos,sep="")
MPos = read.csv(emdListPositive, header=TRUE, col.names=c("protein1","protein2","EMD"))
numOfProteins = 105
cluster = myClusters(MPos,numOfProteins,2, 10000)
sorted = sort(cluster)
cluster = myClusters(MNeg,numOfProteins,2, 10000)
cluster = myClusters(MPos,numOfProteins,2, 10000)
filePos = "ListOfEMD_positive_100.csv"
emdListPositive = paste(pathAtWS,filePos,sep="")
MPos = read.csv(emdListPositive, header=TRUE, col.names=c("protein1","protein2","EMD"))
numOfProteins = 105
cluster = myClusters(MPos,numOfProteins,2, 10000)
MSummed = MNeg + MPos
MNeg
rbindlist(list(MNeg,MPos))[,lapply(.SD, sum, na.rm = TRUE), by X]
rbindlist(list(MNeg,MPos))[,lapply(.SD, sum, na.rm = TRUE), by= X]
library(data.table)
rbindlist(list(MNeg,MPos))[,lapply(.SD, sum, na.rm = TRUE), by= X]
head(MNeg)
head(MPos)
rbindlist(list(MNeg,MPos))[,lapply(.SD, sum, na.rm = TRUE)]
rbindlist(list(MNeg,MPos))[,lapply(.SD, sum, na.rm = TRUE), by = protein1]
?rbindlist
library(dplyr)
bind_rows(MNeg %>% add_rownames(),
MPos %>% add_rownames()) %>%
bind_rows(MNeg %>% add_rownames(),
MPos %>% add_rownames()) %>%
group_by(rowname) %>%
summarise_all(sum)
bind_rows(MNeg %>% add_rownames(),
MPos %>% add_rownames()) %>%
group_by(rowname) %>%
summarise(MNeg$EMD,sum)
bind_rows(MNeg %>% add_rownames(),
MPos %>% add_rownames()) %>%
group_by(rowname) %>%
summarise("EMD",sum)
bind_rows(MNeg %>% add_rownames(),
MPos %>% add_rownames()) %>%
group_by(rowname) %>%
summarise("EMD")
c = bind_rows(MNeg %>% add_rownames(),
MPos %>% add_rownames()) %>%
group_by(rowname) %>%
summarise("EMD")
c
rbind(MNeg, MPos)
k = rbind(MNeg, MPos)
head(k)
head(MNeg)
library(data.table)
rbindlist(list(MNeg,MPos))[,lapply(.SD, sum, na.rm = TRUE), by = protein1]
rbindlist(list(MNeg$EMD,MPos$EMD))[,lapply(.SD, sum, na.rm = TRUE), by = protein1]
rbindlist(list(MNeg[,2],MPos[,2]))[,lapply(.SD, sum, na.rm = TRUE), by = protein1]
rbindlist(list(MNeg,MPos))[,lapply(.SD, sum, na.rm = TRUE), by = protein1]
cluster = myClusters(MNeg,numOfProteins,2, 10000)
cluster = myClusters(MNeg,numOfProteins,3, 10000)
cluster = myClusters(MNeg,numOfProteins,3, 10000)
cluster = myClusters(MNeg,numOfProteins,3, 10000)
cluster = myClusters(MNeg,numOfProteins,3, 10000)
cluster = myClusters(MNeg,numOfProteins,6, 10000)
cluster = myClusters(MNeg,numOfProteins,4, 10000)
sorted = sort(cluster)
?lapply
pmax(MNeg$EMD, MPos$EMD)
MMax = cbind(MNeg$protein1, MNeg$protein2, pmax(MNeg$EMD, MPos$EMD))
MMax
head(MMax)
head(MNeg)
head(MPos)
cluster = myClusters(MMax,numOfProteins,2, 10000)
MMax = cbind(MNeg$protein1, MNeg$protein2, pmax(MNeg$EMD, MPos$EMD), col.names=c("protein1","protein2","EMD"))
head(MNeg)
head(MPos)
head(MMax)
MMax = cbind(MNeg$protein1, MNeg$protein2, pmax(MNeg$EMD, MPos$EMD))
head(MMax)
colnames(MMax) <- c("protein1","protein2","EMD")
head(MMax)
cluster = myClusters(MMax,numOfProteins,2, 10000)
MMax = cbind(MNeg$protein1, MNeg$protein2, pmax(MNeg$EMD, MPos$EMD))
head(MNeg)
head(MPos)
head(MMax)
MNeg$protein1
head(MNeg)
head(MPos)
head(MMax)
MMax = cbind(MNeg$protein1, MNeg$protein2, pmax(MNeg$EMD, MPos$EMD))
colnames(MMax) <- c("protein1","protein2","EMD")
head(MNeg)
head(MPos)
head(MMax)
myClusters <- function(myData, numOfProteins, numOfCenters, numOfIterations){
distMatrix = matrix(myData$EMD, nrow = numOfProteins)
DM = as.matrix(dist(distMatrix, method = "euclidean"))
HC = hclust(as.dist(DM), method="single")
## Silhouette
plot(2:10, sapply(2:10, function(i) {
mean(silhouette(cutree(HC, i), dmatrix=DM)[,"sil_width"]) }),
xlab="Number of clusters", ylab="Average Silhouette", type="b", pch=20)
mds = cmdscale(DM);
cl = kmeans(mds,numOfCenters, iter.max = numOfIterations)
mdsWithLabels = cbind(mds, cl$cluster)
plot(mdsWithLabels, col = mdsWithLabels[,3])
points(cl$centers, pch = 8, col = 1:length(cl$centers))
return(cl$cluster)
}
MMax = cbind(MNeg$protein1, MNeg$protein2, pmax(MNeg$EMD, MPos$EMD))
colnames(MMax) <- c("protein1","protein2","EMD")
head(MNeg)
head(MPos)
head(MMax)
cluster = myClusters(MMax,numOfProteins,2, 10000)
MMAX
MMax
cluster = myClusters(MNeg,numOfProteins,4, 10000)
cluster = myClusters(MNeg,numOfProteins,2, 10000)
sorted = sort(cluster)
cluster = myClusters(MPos,numOfProteins,2, 10000)
cluster = myClusters(MPos,numOfProteins,2, 10000)
cluster = myClusters(MPos,numOfProteins,2, 10000)
cluster = myClusters(MPos,numOfProteins,2, 10000)
cluster = myClusters(MPos,numOfProteins,2, 10000)
cluster = myClusters(MMax,numOfProteins,2, 10000)
MMax = as.data.frame(cbind(MNeg$protein1, MNeg$protein2, pmax(MNeg$EMD, MPos$EMD)))
colnames(MMax) <- c("protein1","protein2","EMD")
head(MNeg)
head(MPos)
head(MMax)
cluster = myClusters(MMax,numOfProteins,2, 10000)
cluster = myClusters(MMax,numOfProteins,2, 10000)
cluster = myClusters(MNeg,numOfProteins,2, 10000)
cluster = myClusters(MPos,numOfProteins,2, 10000)
cluster = myClusters(MMax,numOfProteins,2, 10000)
sorted = sort(cluster)
sorted
psum(MNeg$EMD, MPos$EMD
MSum = as.data.frame(cbind(MNeg$protein1, MNeg$protein2, )))
MSum = as.data.frame(cbind(MNeg$protein1, MNeg$protein2, sum(MNeg$EMD, MPos$EMD)))
MSum
head(MSum)
MSum = as.data.frame(cbind(MNeg$protein1, MNeg$protein2, MNeg$EMD + MPos$EMD))
MSum = as.data.frame(cbind(MNeg$protein1, MNeg$protein2, MNeg$EMD + MPos$EMD))
head(MSum)
head(MNeg)
head(MPos)
head(MSum)
clusterMax = myClusters(MSum,numOfProteins,2, 10000)
colnames(MSum) <- c("protein1","protein2","EMD")
head(MNeg)
head(MPos)
head(MSum)
clusterMax = myClusters(MSum,numOfProteins,2, 10000)
clusterSum = myClusters(MSum,numOfProteins,2, 10000)
sorted = sort(clusterSum)
clusterSum = myClusters(MSum,numOfProteins,2, 10000)
myClusters <- function(myData, numOfProteins, numOfCenters, numOfIterations, title){
distMatrix = matrix(myData$EMD, nrow = numOfProteins)
DM = as.matrix(dist(distMatrix, method = "euclidean"))
HC = hclust(as.dist(DM), method="single")
## Silhouette
plot(2:10, sapply(2:10, function(i) {
mean(silhouette(cutree(HC, i), dmatrix=DM)[,"sil_width"]) }),
xlab="Number of clusters", ylab="Average Silhouette", type="b", pch=20)
mds = cmdscale(DM);
cl = kmeans(mds,numOfCenters, iter.max = numOfIterations)
mdsWithLabels = cbind(mds, cl$cluster)
plot(mdsWithLabels, col = mdsWithLabels[,3], head = title)
points(cl$centers, pch = 8, col = 1:length(cl$centers))
return(cl$cluster)
}
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
myClusters <- function(myData, numOfProteins, numOfCenters, numOfIterations, title){
distMatrix = matrix(myData$EMD, nrow = numOfProteins)
DM = as.matrix(dist(distMatrix, method = "euclidean"))
HC = hclust(as.dist(DM), method="single")
## Silhouette
plot(2:10, sapply(2:10, function(i) {
mean(silhouette(cutree(HC, i), dmatrix=DM)[,"sil_width"]) }),
xlab="Number of clusters", ylab="Average Silhouette", type="b", pch=20)
mds = cmdscale(DM);
cl = kmeans(mds,numOfCenters, iter.max = numOfIterations)
mdsWithLabels = cbind(mds, cl$cluster)
plot(mdsWithLabels, col = mdsWithLabels[,3], title = title)
points(cl$centers, pch = 8, col = 1:length(cl$centers))
return(cl$cluster)
}
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
plot(mdsWithLabels, col = mdsWithLabels[,3], title = "title")
plot(mdsWithLabels, col = mdsWithLabels[,3], title = "title")
plot(x)
plot(1)
plot(1, header = "ha")
plot(1, heading = "as")
?plot
plot(1, main = "as")
myClusters <- function(myData, numOfProteins, numOfCenters, numOfIterations, title){
distMatrix = matrix(myData$EMD, nrow = numOfProteins)
DM = as.matrix(dist(distMatrix, method = "euclidean"))
HC = hclust(as.dist(DM), method="single")
## Silhouette
plot(2:10, sapply(2:10, function(i) {
mean(silhouette(cutree(HC, i), dmatrix=DM)[,"sil_width"]) }),
xlab="Number of clusters", ylab="Average Silhouette", type="b", pch=20)
mds = cmdscale(DM);
cl = kmeans(mds,numOfCenters, iter.max = numOfIterations)
mdsWithLabels = cbind(mds, cl$cluster)
plot(mdsWithLabels, col = mdsWithLabels[,3], main = title)
points(cl$centers, pch = 8, col = 1:length(cl$centers))
return(cl$cluster)
}
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterMax = myClusters(MMax,numOfProteins,2, 10000, "Maximum Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
myClusters <- function(myData, numOfProteins, numOfCenters, numOfIterations, title){
distMatrix = matrix(myData$EMD, nrow = numOfProteins)
DM = as.matrix(dist(distMatrix, method = "euclidean"))
HC = hclust(as.dist(DM), method="single")
## Silhouette
plot(2:10, sapply(2:10, function(i) {
mean(silhouette(cutree(HC, i), dmatrix=DM)[,"sil_width"]) }),
xlab="Number of clusters", ylab="Average Silhouette", type="b", pch=20)
mds = cmdscale(DM);
cl = kmeans(mds,numOfCenters, iter.max = numOfIterations)
mdsWithLabels = cbind(mds, cl$cluster)
plot(mdsWithLabels, col = mdsWithLabels[,3], main = title, xlab = "distances", ylab = "distances")
points(cl$centers, pch = 8, col = 1:length(cl$centers))
return(cl$cluster)
}
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterMax = myClusters(MMax,numOfProteins,2, 10000, "Maximum Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
Sum = sort(clusterSum)
Sum
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
numOfProteins = 103
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
numOfProteins = 104
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
numOfProteins = 105
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterNeg = myClusters(MNeg,numOfProteins,2, 10000, "Negative Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterPos = myClusters(MPos,numOfProteins,2, 10000, "Positive Cluster")
clusterMax = myClusters(MMax,numOfProteins,2, 10000, "Maximum Cluster")
clusterMax = myClusters(MMax,numOfProteins,2, 10000, "Maximum Cluster")
clusterMax = myClusters(MMax,numOfProteins,2, 10000, "Maximum Cluster")
clusterMax = myClusters(MMax,numOfProteins,2, 10000, "Maximum Cluster")
clusterMax = myClusters(MMax,numOfProteins,2, 10000, "Maximum Cluster")
clusterMax = myClusters(MMax,numOfProteins,2, 10000, "Maximum Cluster")
MNeg
View(Sum)
Sum
plot(1)
text(1,"j")
text(1,2,"j")
text(1,2,"j")
text(1,1.1,"j")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,4, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,5, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,5, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,5, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,5, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,5, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,5, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,5, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
clusterSum = myClusters(MSum,numOfProteins,2, 10000, "Summed Cluster")
